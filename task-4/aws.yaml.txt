# This given code will push the image to aws ecr
name: Deploy to Amazon ECS

on:
  push:
    branches: [master]

env:
  AWS_REGION: us-east-1                          # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: test_2             # set this to your Amazon ECR repository name
  ECS_SERVICE: rtc-demo-dev-aws-ecs-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: rtc-demo-dev-ecs-cluster-1                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./task-definition.json    # set this to the path to your Amazon ECS task definition
                                                 # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: my-container

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout


jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ""
    #     aws-secret-access-key: ""
    #     aws-region: ${{ env.AWS_REGION }}
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        audience: sts.amazonaws.com
        role-to-assume: arn:aws:iam::xx:role/mayank_role_for_oidc
        aws-region: us-east-1
     # For java application
    - name: Setup Maven Action
      uses: s4u/setup-maven-action@v1.13.0
      with:
        java-version: "22"
        maven-version: "3.8.7"
    - name: Setup Maven Action
      run:  mvn package
    
    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true