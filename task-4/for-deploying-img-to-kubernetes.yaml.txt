name: Deploy to Kubernetes

on:
  push:
    branches: [master]

env:
  AWS_REGION: us-east-1                          # AWS region, e.g. us-west-1
  ECR_REPOSITORY: test_2                         # Amazon ECR repository name
  K8S_NAMESPACE: default                         # Kubernetes namespace
  K8S_DEPLOYMENT: my-k8s-deployment              #  Kubernetes deployment name
  CONTAINER_NAME: my-container

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        audience: sts.amazonaws.com
        role-to-assume: arn:aws:iam::637423372838:role/mayank_role_for_oidc
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Maven
      uses: s4u/setup-maven-action@v1.13.0
      with:
        java-version: "22"
        maven-version: "3.8.7"
    - name: Build with Maven
      run: mvn package
    
    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to Kubernetes.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Setup Kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name my-cluster
    
    - name: Deploy to Kubernetes
      run: |
        # Set the new image on the Kubernetes deployment
        kubectl set image deployment/${{ env.K8S_DEPLOYMENT }} ${{ env.CONTAINER_NAME }}=${{ steps.build-image.outputs.image }} -n ${{ env.K8S_NAMESPACE }}
        # Wait for the deployment to finish
        kubectl rollout status deployment/${{ env.K8S_DEPLOYMENT }} -n ${{ env.K8S_NAMESPACE }}
